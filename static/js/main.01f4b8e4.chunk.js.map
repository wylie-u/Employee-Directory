{"version":3,"sources":["utils/API.js","Components/UserList.js","Components/AllUsers.js","Components/SearchForm.js","App.js","reportWebVitals.js","index.js"],"names":["query","axios","get","UserList","props","alt","src","user","picture","thumbnail","name","first","last","cell","email","location","timezone","description","AllUsers","className","users","map","SearchForm","onSubmit","handleForm","onChange","handleInputChange","value","search","type","placeholder","id","onClick","handleFormSubmit","App","event","setState","target","state","filterResults","API","then","results","data","this","filter","each","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"gTAIe,EACL,SAAUA,GAChB,OAAOC,IAAMC,IAJD,0C,OCoBDC,EAlBE,SAACC,GAChB,OAGI,cADF,CACE,gBACE,6BACF,qBAAKC,IAAI,OAAOC,IAAKF,EAAMG,KAAKC,QAAQC,cAExC,6BAAKL,EAAMG,KAAKG,KAAKC,QACrB,6BAAKP,EAAMG,KAAKG,KAAKE,OACrB,6BAAKR,EAAMG,KAAKM,OAChB,6BAAKT,EAAMG,KAAKO,QAChB,+BAAKV,EAAMG,KAAKQ,SAASC,SAASC,YAAlC,WCqBSC,EA7BE,SAACd,GAChB,OAGE,aAFA,CAEA,qBACA,qBAAKe,UAAU,YAAf,SACF,uBAAOA,UAAU,kBAAjB,SACE,kCACF,+BACE,yCACA,2CACA,0CACA,sCACA,uCACA,6CAGGf,EAAMgB,MAAMC,KAAI,SAACd,GAAD,OAGf,aAFE,CAED,EAAD,CAA0BA,KAAMA,GAAjBA,EAAKM,mB,MCJbS,MArBf,SAAoBlB,GAClB,OACE,sBAAMmB,SAAUnB,EAAMoB,WAAYL,UAAY,SAA9C,SACE,sBAAKA,UAAU,aAAf,UACE,uBACEM,SAAUrB,EAAMsB,kBAChBC,MAAOvB,EAAMwB,OACblB,KAAK,SACLmB,KAAK,OACLV,UAAU,eACVW,YAAY,yBACZC,GAAG,WAEL,wBAAQC,QAAS5B,EAAM6B,iBAAkBd,UAAU,qCAAnD,0BCiEOe,E,kDArEb,aAAe,IAAD,8BAEZ,gBAmBFR,kBAAoB,SAACS,GAEnB,EAAKC,SAAS,CAACR,OAAOO,EAAME,OAAOV,SAnBnC,EAAKW,MAAQ,CACXV,OAAQ,GACRR,MAAO,GACPmB,cAAe,IAPL,E,qDAYd,WAAqB,IAAD,OAClBC,IAAaC,MAAK,SAACC,GAEjB,EAAKN,SAAS,CAAEhB,MAAOsB,EAAQC,KAAKD,e,oBAsBxC,WAAU,IAAD,OACHH,EAAgBK,KAAKN,MAAMlB,MAAMyB,QAAO,SAACC,GAC3C,OACEA,EAAKpC,KAAKC,MACPoC,cACAC,SAAS,EAAKV,MAAMV,OAAOmB,gBAC9BD,EAAKpC,KAAKE,KACPmC,cACAC,SAAS,EAAKV,MAAMV,OAAOmB,kBAElC,OACE,qBAAK5B,UAAU,MAAf,SACE,sBAAKA,UAAU,aAAf,UACA,sBAAKA,UAAU,SAAf,UACE,oBAAIA,UAAU,YAAd,gCACA,+FAEA,cAAC,EAAD,CACFO,kBAAmBkB,KAAKlB,kBACxBhB,KAAMkC,KAAKhB,YAIX,cAAC,EAAD,CAAUR,MAAOmB,a,GA7DPU,aCCHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OAEL,cAAC,EAAD,IAASC,SAASC,eAAe,SAMrCX,M","file":"static/js/main.01f4b8e4.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=30\";\n// eslint-disable-next-line\nexport default {\n  search: function (query) {\n    return axios.get(BASEURL);\n  },\n};\n","import React from \"react\";\n\n\n// UserList is the outline for the data elements that will be displayed on the page (image, name, phone, email, dob)\nconst UserList = (props) => {\n  return (\n    \n    // <tbody> \n      <tr>\n        <td>\n      <img alt=\"user\" src={props.user.picture.thumbnail}></img>\n      </td>\n      <td>{props.user.name.first}</td>\n      <td>{props.user.name.last}</td>\n      <td>{props.user.cell}</td>\n      <td>{props.user.email}</td>\n      <td>{props.user.location.timezone.description} </td>\n      </tr>\n    // </tbody>\n  );\n};\n// we'll export this file and call it in AllUsers, which will be used to map out each index into their own array to display on the page\nexport default UserList;\n","import React from \"react\";\n\n// UserList is the outline for the data elements that will be displayed on the page (image, name, phone, email, dob)\n// import SearchForm from \"./SearchForm\"; \nimport UserList from \"./UserList\";\n\n\n // this will render the UserList outline \nconst AllUsers = (props) => {\n  return (\n    // table header below div\n    \n    <> \n    <div className=\"container\">\n  <table className=\"table-resposive\">\n    <thead>\n  <tr>\n    <th>Picture</th>\n    <th>Firstname</th>\n    <th>Lastname</th>\n    <th>Cell</th>\n    <th>Email</th>\n    <th>Timezone</th>\n  </tr>\n  \n      {props.users.map((user) => (\n          // each data index will be mapped out into their own array, so that the page will load different users one by one. \n          // setting the key to the cell will give each index a unique identity\n        <UserList key={user.cell} user={user} />\n      ))}\n      </thead>\n      </table>\n      </div>\n    </>\n  );\n};\n\nexport default AllUsers;\n","import React from \"react\";\nimport \"../styles/SearchForm.css\"\n\nfunction SearchForm(props) {\n  return (\n    <form onSubmit={props.handleForm} className = \"search\">\n      <div className=\"form-group\">\n        <input\n          onChange={props.handleInputChange}\n          value={props.search}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search for an Employee\"\n          id=\"search\"\n        />\n        <button onClick={props.handleFormSubmit} className=\"btn btn-primary mt-3 search-button\" >\n          Search\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import \"./App.css\";\nimport { Component } from \"react\";\nimport API from \"./utils/API\";\nimport AllUsers from \"./Components/AllUsers\";\nimport SearchForm from \"./Components/SearchForm\";\nimport UserSort from \"./Components/UserSort\";\n\n\n\n\n// set state to filtered results\nclass App extends Component {\n  constructor() {\n    // calls parent constructor with no arguments\n    super();\n    // setting state to empty array \n    this.state = {\n      search: \"\",\n      users: [],\n      filterResults: []\n    };\n    // set search to empty array \n  }\n  // when page loads, the randomuser api is called\n  componentDidMount() {\n    API.search().then((results) => {\n      // state is then updated to variable called users, which will be the results of the api call\n      this.setState({ users: results.data.results });\n    });\n  }\n\n\n// each = each element in array\n  handleInputChange = (event) => {\n    \n    this.setState({search:event.target.value})\n    \n  };\n\n// emailSorting = () => {\n//   const sortedUsers =this.state.users.sort((a,b)=>\n//   console.log()\n//   );\n//   this.setState(users: sortedUsers)\n// }\n\n\n  \n\n  render() {\n    let filterResults = this.state.users.filter((each) => {\n      return (\n        each.name.first\n          .toLowerCase()\n          .includes(this.state.search.toLowerCase()) ||\n        each.name.last\n          .toLowerCase()\n          .includes(this.state.search.toLowerCase()));\n    });\n    return (\n      <div className=\"App\">\n        <div className=\"background\">\n        <div className=\"header\">\n          <h1 className=\"display-4\">Employee Directory</h1>\n          <p> Search for an employee by entering their name or email below.</p>\n          \n          <SearchForm \n        handleInputChange={this.handleInputChange}\n        name={this.search}\n         />\n        </div>\n        {/* <UserSort emailSort={this.emailSort}/> */}\n        <AllUsers users={filterResults} /> \n      </div>\n      </div>\n     \n      \n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n \n    <App />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n "],"sourceRoot":""}